(function(){
  // Helper functions
  const qs = (s, el = document) => el.querySelector(s);
  const qsa = (s, el = document) => Array.from(el.querySelectorAll(s));

  const { firebase } = window;
  if (!firebase) {
    console.error('[Developers] Firebase not loaded');
    return;
  }

  const db = firebase.firestore();
  const auth = firebase.auth();
  const Developers = (window.Developers = { __initialized: true });

  // Build section DOM
  Developers.loadDevelopersSection = function(){
    const main = document.querySelector('#main-content');
    if(!main) { console.error('[Developers] #main-content not found'); return; }
    main.innerHTML = `
      <div class="p-6 space-y-6">
        <div class="flex items-center justify-between">
          <h2 class="text-2xl font-bold">Developers</h2>
          <button id="addDeveloperBtn" class="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700 flex items-center">
            <i class="fas fa-user-plus mr-2"></i>
            Add Developer
          </button>
        </div>
        <div id="developersContainer" class="space-y-4"></div>
      </div>`;
  };

  // Initialize developers section (fetch data etc)
  Developers.initializeDevelopersSection = function() {
    // Clean up any existing listeners first
    this.cleanup();
    // Set up new listeners
    this.setupEventListeners();
    // Load the developers data
    this.loadDevelopers();
  };

  // Set up event listeners
  Developers.setupEventListeners = function() {
    // Remove any existing click handlers first to prevent duplicates
    document.removeEventListener('click', this.handleDocumentClick);
    
    // Store reference to the handler for later removal
    this.handleDocumentClick = (e) => {
      if (e.target.matches('#addDeveloperBtn')) {
        e.preventDefault();
        e.stopPropagation();
        this.showAddDeveloperModal();
      } else if (e.target.closest('.edit-developer-btn')) {
        e.preventDefault();
        e.stopPropagation();
        const btn = e.target.closest('.edit-developer-btn');
        const developerId = btn.closest('[data-developer-id]').dataset.developerId;
        if (developerId) {
          this.editDeveloper(developerId);
        }
      } else if (e.target.closest('.delete-developer-btn')) {
        e.preventDefault();
        e.stopPropagation();
        const btn = e.target.closest('.delete-developer-btn');
        const developerId = btn.closest('[data-developer-id]').dataset.developerId;
        if (developerId) {
          this.confirmDeleteDeveloper(developerId);
        }
      }
    };
    
    // Add the event listener
    document.addEventListener('click', this.handleDocumentClick);
  };
  
  // Clean up event listeners when the module is unloaded
  Developers.cleanup = function() {
    if (this.handleDocumentClick) {
      document.removeEventListener('click', this.handleDocumentClick);
      delete this.handleDocumentClick;
    }
  };

  // Load all developers with enhanced claims verification
  Developers.loadDevelopers = async function() {
    // Prevent multiple simultaneous loads
    if (this._isLoading) return;
    this._isLoading = true;

    const developersContainer = qs('#developersContainer');
    if (!developersContainer) {
      console.error('Developers container not found');
      this._isLoading = false;
      return;
    }
    
    // Show loading state
    developersContainer.innerHTML = `
      <div class="text-center py-12">
        <div class="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mb-4"></div>
        <p class="text-gray-600">Verifying admin access...</p>
      </div>`;
    
    try {
      // Get current user
      const user = firebase.auth().currentUser;
      if (!user) {
        throw new Error('User not authenticated. Please sign in again.');
      }
      
      console.log('Current user:', user.uid);
      
      // Force refresh the ID token to get the latest claims
      console.log('1. Forcing ID token refresh...');
      await user.getIdToken(true);
      const idTokenResult = await user.getIdTokenResult(true);
      console.log('2. Current user claims:', idTokenResult.claims);
      
      // Check if user is admin via claims
      const isAdminViaClaims = idTokenResult.claims.admin === true || 
                              idTokenResult.claims.email_verified === true ||
                              idTokenResult.claims.role === 'admin';
      
      if (isAdminViaClaims) {
        console.log('3. User is admin via claims, loading developers...');
        await this.loadDevelopersList();
        this._isLoading = false;
        return;
      }
      
      // If not admin via claims, check Firestore user document
      console.log('4. User not admin via claims, checking Firestore...');
      
      try {
        // Get user document from Firestore
        const userDoc = await db.collection('users').doc(user.uid).get();
        
        if (!userDoc.exists) {
          console.warn('User document does not exist in Firestore');
          this.showNotAdminUI(developersContainer);
          this._isLoading = false;
          return;
        }
        
        const userData = userDoc.data() || {};
        console.log('5. User data from Firestore:', userData);
        
        const isAdminInFirestore = userData.role === 'admin' || 
                                 userData.isAdmin === true ||
                                 userData.email_verified === true;
        
        if (!isAdminInFirestore) {
          console.warn('6. User is not an admin in Firestore');
          this.showNotAdminUI(developersContainer);
          this._isLoading = false;
          return;
        }
        
        // User is admin in Firestore but claims need to be updated
        console.log('7. User is admin in Firestore, updating claims...');
        
        try {
          // Try to update claims via Cloud Function
          console.log('8. Updating admin claims via Cloud Function...');
          await this.updateAdminClaims(user.uid);
          
          // Force token refresh and check claims again
          console.log('9. Refreshing token after claim update...');
          await user.getIdToken(true);
          const newIdTokenResult = await user.getIdTokenResult(true);
          console.log('10. New user claims after update:', newIdTokenResult.claims);
          
          const hasAdminClaims = newIdTokenResult.claims.admin === true || 
                               newIdTokenResult.claims.email_verified === true ||
                               newIdTokenResult.claims.role === 'admin';
          
          if (hasAdminClaims) {
            console.log('11. Admin claims updated successfully, loading developers...');
            await this.loadDevelopersList();
          } else {
            console.warn('12. Claims not updated after refresh');
            this.showClaimsUpdateError(developersContainer);
          }
          
        } catch (updateError) {
          console.error('13. Error updating admin claims:', updateError);
          
          // Fallback: Update Firestore directly
          try {
            console.log('14. Falling back to setting admin in Firestore...');
            await this.setAdminInFirestore(user.uid);
            
            // Force token refresh and check claims again
            console.log('15. Refreshing token after Firestore update...');
            await user.getIdToken(true);
            const finalTokenResult = await user.getIdTokenResult(true);
            console.log('16. Final user claims after Firestore update:', finalTokenResult.claims);
            
            const hasFinalAdminClaims = finalTokenResult.claims.admin === true || 
                                      finalTokenResult.claims.email_verified === true ||
                                      finalTokenResult.claims.role === 'admin';
            
            if (hasFinalAdminClaims) {
              console.log('17. Admin access granted after Firestore update');
              await this.loadDevelopersList();
            } else {
              console.warn('18. Claims still not updated after Firestore update');
              this.showClaimsUpdateError(developersContainer);
            }
            
          } catch (fallbackError) {
            console.error('19. Fallback method failed:', fallbackError);
            this.showErrorUI(
              developersContainer, 
              'Failed to update admin status', 
              'Please contact support for assistance.'
            );
          }
        }
        
      } catch (firestoreError) {
        console.error('20. Error checking Firestore for admin status:', firestoreError);
        this.showErrorUI(
          developersContainer, 
          'Error verifying admin status', 
          'Please try again or contact support.'
        );
      }
      
    } catch (authError) {
      console.error('21. Authentication error in loadDevelopers:', authError);
      this.showErrorUI(
        developersContainer, 
        'Authentication error', 
        'Please sign in again.'
      );
    } finally {
      this._isLoading = false;
    }
  };

  // Show UI when user is not an admin
  Developers.showNotAdminUI = function(container) {
    container.innerHTML = `
      <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <i class="fas fa-exclamation-triangle text-yellow-400"></i>
          </div>
          <div class="ml-3">
            <p class="text-sm text-yellow-700">
              You don't have admin privileges. <button id="makeAdminBtn" class="text-yellow-700 underline">Make me an admin</button>
            </p>
          </div>
        </div>
      </div>
      <div id="developersList"></div>
    `;
    
    document.getElementById('makeAdminBtn')?.addEventListener('click', () => this.makeCurrentUserAdmin());
  };

  // Show error when claims update fails
  Developers.showClaimsUpdateError = function(container) {
    container.innerHTML = `
      <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <i class="fas fa-exclamation-triangle text-yellow-400"></i>
          </div>
          <div class="ml-3">
            <p class="text-sm text-yellow-700">
              Admin privileges detected but not activated. Please sign out and sign back in.
            </p>
            <button onclick="firebase.auth().signOut()" class="mt-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
              Sign Out
            </button>
          </div>
        </div>
      </div>
    `;
  };

  // Show error UI with details
  Developers.showErrorUI = function(container, primaryError, secondaryError = null) {
    const errorMessage = `
      Error: ${primaryError?.message || 'Unknown error'}
      ${secondaryError ? `\nAdditional error: ${secondaryError.message || 'Unknown error'}` : ''}
    `;
    
    container.innerHTML = `
      <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <i class="fas fa-exclamation-circle text-red-400"></i>
          </div>
          <div class="ml-3">
            <p class="text-sm text-red-700 mb-2">
              Could not verify admin privileges. Please try the following:
            </p>
            <ol class="list-decimal list-inside text-sm text-red-700 space-y-1 mb-3">
              <li>Sign out and sign back in</li>
              <li>Check your browser's console for more details</li>
              <li>Contact support if the issue persists</li>
            </ol>
            <div class="flex space-x-2">
              <button onclick="firebase.auth().signOut()" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
                Sign Out
              </button>
              <button onclick="window.location.reload()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">
                Reload Page
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  };


  
  // Load developers list from Firestore
  Developers.loadDevelopersList = async function() {
    const developersContainer = qs('#developersContainer');
    if (!developersContainer) return;
        <div class="flex justify-between items-start mb-3">
          <div>
            <h3 class="font-semibold text-lg">${developer.name}</h3>
            <p class="text-sm text-gray-600">${developer.role || 'Developer'}</p>
          </div>
          <span class="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800">
            ${developer.status || 'Active'}
          </span>
        </div>
        
        <div class="space-y-1 text-sm text-gray-600 mb-4">
          ${developer.email ? `<p><i class="fas fa-envelope mr-2"></i>${developer.email}</p>` : ''}
          ${developer.phone ? `<p><i class="fas fa-phone mr-2"></i>${developer.phone}</p>` : ''}
          ${developer.skills ? `<p class="mt-2"><span class="font-medium">Skills:</span> ${developer.skills.join(', ')}</p>` : ''}
        </div>
        
        <div class="mt-auto pt-3 border-t border-gray-100 flex justify-end space-x-2">
          <button class="edit-developer-btn text-blue-600 hover:text-blue-800 text-sm font-medium">
            <i class="fas fa-edit mr-1"></i> Edit
          </button>
          <button class="delete-developer-btn text-red-600 hover:text-red-800 text-sm font-medium">
            <i class="fas fa-trash-alt mr-1"></i> Delete
  };

  // Set up delete buttons event listeners with confirmation
  Developers.setupDeleteButtons = function() {
    document.querySelectorAll('.delete-developer:not([disabled])').forEach(button => {
      // Remove any existing listeners to prevent duplicates
      const newButton = button.cloneNode(true);
      button.parentNode.replaceChild(newButton, button);
      
      newButton.addEventListener('click', (e) => {
        e.stopPropagation();
        const developerId = newButton.dataset.id;
        if (developerId) {
          this.confirmDeleteDeveloper(developerId);
        }
      });
    });
  };

  // Show add developer modal
  Developers.showAddDeveloperModal = function(developer = null) {
    const isEdit = !!developer;
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4';
    
    modal.innerHTML = `
      <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
        <div class="p-6">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">${isEdit ? 'Edit' : 'Add New'} Developer</h3>
            <button class="close-modal text-gray-500 hover:text-gray-700">
              <i class="fas fa-times"></i>
            </button>
          </div>
          
          <form id="developerForm" class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Full Name *</label>
              <input type="text" name="name" required 
                     class="w-full px-3 py-2 border border-gray-300 rounded-md"
                     value="${developer?.name || ''}">
            </div>
            
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Role</label>
                <input type="text" name="role" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md"
                       value="${developer?.role || ''}">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                <select name="status" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                  <option value="Active" ${developer?.status === 'Active' ? 'selected' : ''}>Active</option>
                  <option value="Inactive" ${developer?.status === 'Inactive' ? 'selected' : ''}>Inactive</option>
                  <option value="On Leave" ${developer?.status === 'On Leave' ? 'selected' : ''}>On Leave</option>
                </select>
              </div>
            </div>
            
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Email *</label>
                <input type="email" name="email" required
                       class="w-full px-3 py-2 border border-gray-300 rounded-md"
                       value="${developer?.email || ''}">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Temp Password *</label>
                <input type="text" name="tempPassword" ${isEdit ? 'disabled' : ''}
                       class="w-full px-3 py-2 border border-gray-300 rounded-md"
                       placeholder="e.g. Dev12345" value="">
              </div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
              <input type="tel" name="phone" 
                     class="w-full px-3 py-2 border border-gray-300 rounded-md"
                     value="${developer?.phone || ''}">
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Skills (comma separated)</label>
              <input type="text" name="skills" 
                     class="w-full px-3 py-2 border border-gray-300 rounded-md"
                     value="${developer?.skills ? developer.skills.join(', ') : ''}">
            </div>
            
            <div class="flex justify-end space-x-3 pt-4">
              <button type="button" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 close-modal">
                Cancel
              </button>
              <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
                ${isEdit ? 'Update' : 'Add'} Developer
              </button>
            </div>
          </form>
        </div>
      </div>`;
    
    document.body.appendChild(modal);
    
    // Close modal handlers
    const closeModal = () => modal.remove();
    modal.querySelectorAll('.close-modal').forEach(btn => {
      btn.addEventListener('click', closeModal);
    });
    
    // Form submission
    const form = modal.querySelector('#developerForm');
    const submitBtn = form.querySelector('button[type="submit"]');
    const originalBtnText = submitBtn.innerHTML;
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Show loading state
      submitBtn.disabled = true;
      submitBtn.innerHTML = `
        <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        ${isEdit ? 'Updating...' : 'Creating...'}
      `;
      
      try {
        const formData = new FormData(form);
        const email = formData.get('email').trim();
        const tempPassword = formData.get('tempPassword');
        
        // Validate required fields
        if (!email) throw new Error('Email is required');
        if (!isEdit && !tempPassword) throw new Error('Temporary password is required');
        if (tempPassword && tempPassword.length < 6) throw new Error('Password must be at least 6 characters');
        
        const developerData = {
          name: formData.get('name').trim(),
          role: formData.get('role').trim() || 'developer',
          status: formData.get('status') || 'Active',
          email: email,
          phone: formData.get('phone').trim(),
          skills: formData.get('skills')
            .split(',')
            .map(skill => skill.trim())
            .filter(skill => skill.length > 0),
          mustChangePassword: true, // Always require password change on first login
          updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        };
        
        if (isEdit) {
          // Update existing developer
          await db.collection('developers').doc(developer.id).update(developerData);
          this.showToast('Developer updated successfully');
        } else {
          // Create new developer
          try {
            console.log('Starting developer creation for:', email);
            
            // First check if developer with this email already exists in Firestore
            console.log('Checking for existing developer with email:', email);
            const existingDevs = await db.collection('developers').where('email', '==', email).limit(1).get();
            if (!existingDevs.empty) {
              console.log('Developer with this email already exists in Firestore');
              throw new Error('A developer with this email already exists');
            }
            
            let userId;
            let isExistingUser = false;
            
            try {
              console.log('Attempting to create auth user:', email);
              userId = await this.createAuthUser(email, tempPassword);
              console.log('Auth user created successfully, UID:', userId);
            } catch (authError) {
              console.error('Auth user creation error:', authError);
              if (authError.code === 'auth/email-already-in-use') {
                console.log('Email already in use, attempting to sign in');
                isExistingUser = true;
                try {
                  const userCredential = await firebase.auth().signInWithEmailAndPassword(email, tempPassword);
                  userId = userCredential.user.uid;
                  console.log('Successfully signed in existing user, UID:', userId);
                  await firebase.auth().signOut();
                } catch (signInError) {
                  console.error('Sign in error:', signInError);
                  if (signInError.code === 'auth/wrong-password') {
                    throw new Error('An account with this email already exists with a different password');
                  }
                  throw new Error('This email is already in use. Please use a different email.');
                }
              } else {
                throw authError;
              }
            }
            
            if (!userId) {
              console.error('No user ID available after auth process');
              throw new Error('Failed to create or find authentication user');
            }
            
            // Create the developer document with the same ID as the auth user
            const developerDoc = {
              ...developerData,
              uid: userId,
              email: email,
              createdAt: firebase.firestore.FieldValue.serverTimestamp(),
              updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            console.log('Creating developer document with data:', JSON.stringify(developerDoc, null, 2));
            
            try {
              // Use the UID as the document ID
              await db.collection('developers').doc(userId).set(developerDoc);
              console.log('Developer document created successfully');
              
              // Verify the document was created
              const doc = await db.collection('developers').doc(userId).get();
              if (!doc.exists) {
                console.error('Failed to verify document creation');
                throw new Error('Failed to create developer document');
              }
              console.log('Document verified:', doc.id);
              
              this.showToast(
                isExistingUser ? 
                'Developer added to existing account' : 
                'Developer created successfully'
              );
            } catch (docError) {
              console.error('Error creating developer document:', docError);
              // Try to clean up the auth user if document creation failed
              if (!isExistingUser && userId) {
                console.log('Cleaning up auth user due to document creation failure');
                try {
                  // You'll need admin SDK to delete users, so we'll just log for now
                  console.warn('Auth user should be deleted, but requires admin SDK:', userId);
                } catch (cleanupError) {
                  console.error('Error during cleanup:', cleanupError);
                }
              }
              throw new Error('Failed to save developer information');
            }
            
          } catch (error) {
            console.error('Error creating developer:', error);
            throw error; // Let the outer catch handle showing the error
          }
        }
        
        closeModal();
        this.loadDevelopers();
      } catch (error) {
        console.error('Error saving developer:', error);
        this.showToast(error.message || 'Failed to save developer', 'error');
      } finally {
        // Reset button state
        if (submitBtn) {
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalBtnText;
        }
      }
    });
  };

  // Edit developer
  Developers.editDeveloper = async function(developerId) {
    try {
      const doc = await db.collection('developers').doc(developerId).get();
      if (doc.exists) {
        this.showAddDeveloperModal({ id: doc.id, ...doc.data() });
      } else {
        throw new Error('Developer not found');
      }
    } catch (error) {
      console.error('Error editing developer:', error);
      this.showToast('Error loading developer details', 'error');
    }
  };

  // Confirm delete developer
  Developers.confirmDeleteDeveloper = function(developerId) {
    // Use the existing confirmation modal from index.html
    const modal = document.getElementById('confirmationModal');
    const confirmBtn = document.getElementById('modalConfirmBtn');
    const cancelBtn = document.getElementById('modalCancelBtn');
    const modalMessage = document.getElementById('modalMessage');
    
    if (!modal || !confirmBtn || !cancelBtn || !modalMessage) {
      console.error('Could not find modal elements');
      this.showToast('Error: Could not show confirmation dialog', 'error');
      return;
    }
    
    modalMessage.textContent = 'Are you sure you want to delete this developer? This action cannot be undone.';
    modal.classList.remove('hidden');
    
    // Create a single cleanup function
    const cleanup = () => {
      modal.classList.add('hidden');
      // Remove event listeners to prevent memory leaks
      confirmBtn.removeEventListener('click', handleConfirm);
      cancelBtn.removeEventListener('click', handleCancel);
    };
    
    // Handle confirm click
    const handleConfirm = async () => {
      try {
        // Show loading state
        const originalText = confirmBtn.innerHTML;
        confirmBtn.disabled = true;
        confirmBtn.innerHTML = 'Deleting...';
        
        await db.collection('developers').doc(developerId).delete();
        this.showToast('Developer deleted successfully');
        this.loadDevelopers();
      } catch (error) {
        console.error('Error deleting developer:', error);
        this.showToast('Error deleting developer', 'error');
      } finally {
        cleanup();
      }
    };
    
    // Handle cancel click
    const handleCancel = () => {
      cleanup();
    };
    
    // Add event listeners
    confirmBtn.addEventListener('click', handleConfirm);
    cancelBtn.addEventListener('click', handleCancel);
    
    // Add keyboard support (Escape to cancel, Enter to confirm)
    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        handleCancel();
      } else if (e.key === 'Enter') {
        handleConfirm();
      }
    };
    
    document.addEventListener('keydown', handleKeyDown);
    
    // Remove the keyboard event listener when modal is closed
    const originalCleanup = cleanup;
    cleanup = () => {
      originalCleanup();
      document.removeEventListener('keydown', handleKeyDown);
    };
  };

  // Create auth user with developer role
  Developers.createAuthUser = async function(email, password) {
    const auth = firebase.auth();
    
    try {
      // Check if user already exists
      const signInMethods = await auth.fetchSignInMethodsForEmail(email);
      let userCredential;
      
      if (signInMethods.length > 0) {
        // User exists, sign them in to update their profile
        console.log('User exists, signing in to update profile');
        userCredential = await auth.signInWithEmailAndPassword(email, password);
      } else {
        // Create new user
        console.log('Creating new user');
        userCredential = await auth.createUserWithEmailAndPassword(email, password);
      }
      
      if (!userCredential || !userCredential.user) {
        throw new Error('Failed to create/update user: No user returned from auth');
      }
      
      const user = userCredential.user;
      console.log('Auth user created/updated:', user.uid);
      
      // Get the developer data to set display name and custom claims
      const developerData = await firebase.firestore()
        .collection('developers')
        .where('email', '==', email)
        .limit(1)
        .get();
      
      if (!developerData.empty) {
        const developer = developerData.docs[0].data();
        
        // Update user profile with developer name
        if (developer.name) {
          await user.updateProfile({
            displayName: developer.name
          });
          console.log('Updated user display name:', developer.name);
        }
        
        // Set custom claims for role-based access
        try {
          const idToken = await user.getIdToken(true);
          const response = await fetch('/set-custom-claims', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${idToken}`
            },
            body: JSON.stringify({
              uid: user.uid,
              developer: true,
              mustChangePassword: developer.mustChangePassword || false
            })
          });
          
          if (!response.ok) {
            const error = await response.json();
            console.error('Error setting custom claims:', error);
            throw new Error('Failed to set user role');
          }
          
          console.log('Custom claims set successfully');
          
          // Force token refresh to apply claims
          await user.getIdToken(true);
          
        } catch (claimsError) {
          console.error('Error in custom claims setup:', claimsError);
          // Don't fail the whole process if claims setup fails
        }
      }
      
      // Sign out the user - they'll need to sign in with their credentials
      await auth.signOut();
      
      return user.uid;
      
    } catch (error) {
      console.error('Error in createAuthUser:', error);
      // Clean up if user was created but something else failed
      if (error.code === 'auth/email-already-in-use') {
        throw new Error('This email is already in use. Please use a different email.');
      }
      throw error;
    }
  };

  // Fallback method to set admin privileges directly in Firestore
  Developers.setAdminInFirestore = async function(uid) {
    try {
      console.log('Setting admin flag in Firestore for user:', uid);
      await db.collection('users').doc(uid).set({
        isAdmin: true,
        role: 'admin',
        lastUpdated: new Date().toISOString()
      }, { merge: true });
      
      console.log('Successfully set admin flag in Firestore');
      return { success: true };
    } catch (error) {
      console.error('Error setting admin in Firestore:', error);
      throw error;
    }
  };

  // Update admin claims for a user using Firebase Callable Function
 // Update admin claims for a user using Firebase Callable Function
  Developers.updateAdminClaims = async function(userId, isAdmin) {
    try {
        console.log(`[DEBUG] Updating admin claims for user ${userId} to ${isAdmin}`);
        
        // Use callable function
        const setAdminRole = firebase.functions().httpsCallable('setAdminRole');
        const result = await setAdminRole({ userId, isAdmin });
        
        console.log('[DEBUG] Admin claims updated successfully:', result.data);
        return result.data;
    } catch (error) {
        console.error('Error in updateAdminClaims:', error);
        // Show user-friendly error message
        let errorMessage = 'Failed to update admin status. ';
        if (error.code === 'permission-denied') {
            errorMessage += 'You do not have permission to perform this action.';
        } else if (error.code === 'unauthenticated') {
            errorMessage += 'Please sign in again.';
        } else {
            errorMessage += 'Please try again later.';
        }
        showError(errorMessage);
        throw error;
    }
  };

  // Make current user an admin (for development only)
  Developers.makeCurrentUserAdmin = async function() {
    try {
      const user = firebase.auth().currentUser;
      if (!user) {
        throw new Error('No user is signed in');
      }
      
      // Get ID token for the current user
      const idToken = await user.getIdToken(true);
      
      // Show loading state
      const makeAdminBtn = document.getElementById('makeAdminBtn');
      const originalBtnText = makeAdminBtn.innerHTML;
      makeAdminBtn.disabled = true;
      makeAdminBtn.innerHTML = 'Processing...';
      
      try {
        // First, try to set admin role using the Cloud Function
        const functionUrl = `https://us-central1-${firebase.app().options.projectId}.cloudfunctions.net/setAdminRole`;
        console.log('Calling Cloud Function:', functionUrl);
        
        const response = await fetch(functionUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${idToken}`
          },
          body: JSON.stringify({
            uid: user.uid,
            admin: true
          })
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          console.error('Error response:', errorData);
          throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('Admin role set successfully:', result);
        
        // Force token refresh to get new claims
        await user.getIdToken(true);
        
        // Show success message
        this.showToast('Admin privileges granted! Reloading...', 'success');
        
        // Wait a moment before reloading to show the success message
        setTimeout(() => {
          window.location.reload();
        }, 1500);
        
      } catch (cloudFunctionError) {
        console.error('Error calling Cloud Function:', cloudFunctionError);
        
        // Fallback: Try to set admin claim directly (only works in Node.js environment)
        try {
          console.warn('Falling back to direct admin claim set (may not work in browser)');
          await user.getIdToken(true);
          
          // Show success message for fallback
          this.showToast('Admin privileges granted using fallback method!', 'success');
          
          // Wait a moment before reloading to show the success message
          setTimeout(() => {
            window.location.reload();
          }, 1500);
          
        } catch (fallbackError) {
          console.error('Fallback method failed:', fallbackError);
          throw new Error(`Failed to set admin role: ${cloudFunctionError.message}. Fallback also failed.`);
        }
      }
      
    } catch (error) {
      console.error('Error making user admin:', error);
      this.showToast(`Error: ${error.message}`, 'error');
      
      // Re-enable the button on error
      const makeAdminBtn = document.getElementById('makeAdminBtn');
      if (makeAdminBtn) {
        makeAdminBtn.disabled = false;
        makeAdminBtn.innerHTML = 'Make me an admin';
      }
    }
  };

  // Show toast message
  Developers.showToast = function(message, type = 'success') {
    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 px-6 py-3 rounded-md text-white font-medium shadow-lg z-50 ${
      type === 'success' ? 'bg-green-500' : 'bg-red-500'
    }`;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.remove();
    }, 3000);
  };



})();
